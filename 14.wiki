{{Nawigacja|Ukąś Pythona|[[Ukąś Pythona/Wejście-Wyjście|Wejście-Wyjście]]|[[Ukąś Pythona/Biblioteka standardowa|Biblioteka standardowa]]|}}

==Wprowadzenie==
Wyjątki pojawiają się, gdy w twoim programie dzieje się coś ''wyjątkowego''. Na przykład, co zrobić, gdy chcesz otworzyć pewien plik, a okazuje się, że on nie istnieje? Albo co wtedy, gdy przypadkiem w trakcie działania programu go usunąłeś? Właśnie takimi sytuacjami zajmują się '''wyjątki'''.

Podobnie, co wtedy, gdy twój program posiada jakieś nieprawidłowe wyrażenia? Python w takim wypadku '''zgłasza''' się i mówi, że gdzieś jest '''błąd'''.

==Błędy==
Rozważmy proste wywołanie polecenia <code>print</code>. Co się stanie, gdy przypadkiem zapiszemy <code>print</code> jako <code>Print</code>? W tym wypadku Python ''zgłasza'' błąd nazwy polecenia.

<pre>
>>> Print (1, 2, 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'Print' is not defined
>>> print (1, 2, 3)
(1, 2, 3)
</pre>

Zobacz, że Python pokazał rodzaj błędu (<code>NameError</code>) oraz miejsce, w którym ten błąd wystąpił. Oto, jak działa Pythonowa kontrola błędów.

==Wyjątki==
'''Spróbujemy''' uzyskać wpis od użytkownika. W tym przykładzie, zamiast coś wpisywać, naciśnij <tt>ctrl-d</tt> i zobacz, co się stanie.

<pre>
>>> s = raw_input('Wpisz coś ---> ')
Wpisz coś ---> Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
EOFError
</pre>

Python zgłasza błąd typu <code>EOFError</code>, co oznacza, że znalazł symbol ''końca pliku'' (który jest reprezentowany przez <tt>ctrl-d</tt>) w miejscu, w którym on nie powinien występować (''EOF'' - ''End Of File'' &mdash; ang. koniec pliku).

==Obsługa wyjątków==
Możemy obsłużyć wyjątki używając wyrażenia <tt>try...except...</tt>. Do bloku <code>try</code> wprowadzamy nasze polecenia testowe, a w <code>except</code> wpisujemy wszystko, co ma się zdarzyć, gdy wystąpi błąd.

Przykład:

<source lang="py">
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Nazwa pliku: try_except.py

try:
    tekst = raw_input('Wpisz coś ---> ')
except EOFError:
    print 'Dlaczego użyłeś znaku końca pliku?'
except KeyboardInterrupt:
    print 'Przerwałeś operację.'
else:
    print 'Wpisałeś %s' % tekst
</source>

Rezultat:

<pre>
$ python try_except.py
Wpisz coś ---> Dlaczego użyłeś znaku końca pliku?
$ python try_except.py
Wpisz coś ---> ^CPrzerwałeś operację.
$ python try_except.py
Wpisz coś ---> tekst nie wywołujący błędów
Wpisałeś tekst nie wywołujący błędów
</pre>

Za pierwszym razem naciśnięto <tt>ctrl-d</tt>, za drugim <tt>ctrl-c</tt>.

Jak to działa:

Wstawiamy wszystkie polecenia, które mogą powodować błędy, do bloku <code>try</code>, a następnie do <code>except</code> dopisujemy rodzaje błędów i sposoby radzenia sobie z nimi. <code>except</code> może odnosić się do jednego błędu lub do kilku, jeżeli są zapisane w formie krotki. W przypadku, gdy rodzaj błędu nie zostanie określony, <code>except</code> odniesie się do wszystkich błędów.

Pamiętaj, że zawsze musi być co najmniej jedno <code>except</code> przy każdym <code>try</code>. W przeciwnym razie, jaki byłby sens wstawiania bloku <code>try</code>?

Gdy nie obsłużymy błędu za pomocą <code>except</code>, wtedy Python domyślnie zatrzymuje program i wyświetla komunikat o błędzie. Już to wcześniej zobaczyliśmy.

Do bloku <code>try</code> możesz dołączyć też blok <code>else</code>, który zostanie wywołany, gdy nie wystąpi żaden wyjątek.

==Zgłaszanie wyjątków==
Możesz zgłosić wyjątki używając wyrażenia <code>raise</code> poprzez podanie nazwy wyjątku oraz obiektu, który ma się pojawić.

Błąd lub wyjątek, który chcesz zgłosić, powinien być klasą, która bezpośrednio lub pośrednio musi być pochodną klasy <code>Exception</code>.

Przykład:

<source lang="py">
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Nazwa pliku: zglaszanie.py

class WyjatekKrotkiegoWpisu(Exception):
    '''Klasa wyjątku zdefiniowana przez użytkownika.'''
    def __init__(self, dlugosc, conajmniej):
        Exception.__init__(self)
        self.dlugosc = dlugosc
        self.conajmniej = conajmniej

try:
    tekst = raw_input('Wpisz coś ---> ')
    if len(tekst) < 3:
        raise WyjatekKrotkiegoWpisu(len(tekst), 3)
    # Pozostałe polecenia mogą tu być normalnie wpisane.
except EOFError:
    print 'Dlaczego użyłeś znaku końca pliku?'
except WyjatekKrotkiegoWpisu, wkw:
    print 'WyjatekKrotkiegoWpisu: Wpis miał długość %d, wymagane co najmniej %d.'\
        % (wkw.dlugosc, wkw.conajmniej)
else:
    print 'Żaden wyjątek nie został zgłoszony.'
</source>

Rezultat:

<pre>
$ python zglaszanie.py
Wpisz coś ---> a
WyjatekKrotkiegoWpisu: Wpis miał długość 1, wymagane co najmniej 3.
$ python zglaszanie.py
Wpisz coś ---> abc
Żaden wyjątek nie został zgłoszony.
</pre>

Jak to działa:

Tutaj stworzyliśmy własny typ wyjątku o nazwie <code>WyjatekKrotkiegoWpisu</code>. Ma on dwa pola &mdash; <code>dlugosc</code>, czyli długość wpisanego tekstu oraz <code>conajmniej</code>, czyli minimalna długość, jaką program oczekuje.

W wyrażeniu <code>except</code> wymieniamy klasę błędu oraz zmienną, do której zostanie zapisany obiekt błędu / wyjątku. To jest analogiczne do parametrów i argumentów przy wywoływaniu funkcji. Wewnątrz tego właśnie wyrażenia <code>except</code> używamy pól <code>dlugosc</code> i <code>conajmniej</code> do przekazania odpowiedniej informacji użytkownikowi.

==try...finally...==
Przypuśćmy, że odczytujesz jakiś plik w swoim programie. W jaki sposób zapewnić, że plik zostanie zamknięty, niezależnie od tego, czy wyjątek został zgłoszony, czy nie? W tym celu służy blok <code>finally</code>. Oczywiście możesz użyć wyrażenia <code>except</code> razem z blokiem <code>finally</code> dla tego samego bloku <code>try</code>.

Przykład:

<source lang="py">
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Nazwa pliku: try_finally.py

import time

try:
    plik = open('wierszyk.txt')
    while True:
        wers = plik.readline()
        if len(wers) == 0:
            break
        print wers,
        time.sleep(2) # Żeby program się na chwilę zatrzymał.
except KeyboardInterrupt:
    print '!! Przerwałeś odczytywanie pliku.'
finally:
    plik.close()
    print '(Sprzątanie: Zamknięto plik)'
</source>

Rezultat:

<pre>
$ python try_finally.py
Programming is fun
When the work is done
if you wanna make your work also fun:
^C!! Przerwałeś odczytywanie pliku.
(Sprzątanie: Zamknięto plik)
</pre>

Jak to działa:

Wykonaliśymy prosty odczyt tekstu z pliku, ale dodatkowo dodaliśmy dwusekundową przerwę po wypisaniu na ekran każdej linijki dzięki funkcji <code>time.sleep</code>, aby program pracował powoli. (Python z natury jest bardzo szybki.) Jeszcze w trakcie odczytu nacisnęliśmy <tt>ctrl-c</tt> i przerwaliśmy działanie programu.

Wyjątek dla błędu <code>KeyboardInterrupt</code> został wyświetlony i program zakończył swoje działanie. Jednakże tuż przed końcem programu został wykonany blok <code>finally</code>. Mamy więc pewność, że plik został poprawnie zamknięty.

==Wyrażenie with==
Uzyskiwanie zasobów w bloku <code>try</code> oraz uwalnianie ich w <code>finally</code> to powszechne działanie. Jednak istnieje również wyrażenie <code>with</code>, które pozwala to zrobić w prostszy sposób:

<source lang="py">
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Nazwa pliku: with.py

from __future__ import with_statement # Niepotrzebne w Pythonie 2.6 i wyższych (w szczególności 3.x)

with open('wierszyk.txt') as plik:
    for wers in plik:
        print wers,
</source>

Jak to działa:

Wynik powinien być taki sam, jak w powyższym przykładzie. Różnicą jest to, że tym razem używamy funkcji <code>open</code> razem z wyrażeniem <code>with</code> &mdash; nie przejmujemy się zamykaniem pliku, gdyż <code>with open</code> robi to automatycznie. (W Pythonie 2.5 <code>with</code> musi być najpierw zaimportowane z modułu <code>__future__</code>.)

Tłem tego wszystkiego jest protokół używany przez <code>with</code>. W tym wypadku zajmuje się plikiem przekazanym przez funkcję <code>open</code>.

Polecenie <code>with</code> ''zawsze'' wywołuje funkcję <code>plik.__enter__</code> przed wykonaniem swojego bloku oraz ''zawsze'' na koniec wywołuje funkcję <code>plik.__exit__</code>.

Dlatego zadanie kodu, który wpisaliśmy do bloku <code>finally</code> jest już automatycznie wykonane przez metodę <code>__exit__</code>. To właśnie pomaga nam ominąć konieczność używania cały czas wyrażeń <code>try...finally...</code>.

Dalsza dyskusja na ten temat jest już poza zakresem tej książki, dlatego dla pełnych wyjaśnień zajrzyj do dokumentu [http://www.python.org/dev/peps/pep-0343/ PEP 343].

==Podsumowanie==
Poznaliśmy użycie wyrażeń <tt>try...except...</tt> oraz <tt>try...finally...</tt>. Dodatkowo dowiedzieliśmy się, jak tworzyć i zgłaszać wyjątki.

Dalej poznamy bibliotekę standardową Pythona.

{{Nawigacja|Ukąś Pythona|[[Ukąś Pythona/Wejście-Wyjście|Wejście-Wyjście]]|[[Ukąś Pythona/Biblioteka standardowa|Biblioteka standardowa]]|}}
