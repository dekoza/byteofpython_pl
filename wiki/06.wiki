{{Nawigacja|Ukąś Pythona|[[Ukąś Pythona/Podstawy|Podstawy]]|[[Ukąś Pythona/Kontrola przepływu|Kontrola przepływu]]|}}

==Wprowadzenie==
Większość poleceń (linii logicznych), jak będziesz w przyszłości pisał, będzie zawierała '''wyrażenia''' (ang. expressions). Prostym przykładem wyrażenia może być <code>2 + 3</code>. Wyrażenie możemy podzielić na operatory i operandy.

''Operatory'' to funkcjonalności, które coś robią i są reprezentowane przez symbole, jak <tt>+</tt>, albo przez specjalne słowa kluczowe. Operatory, jak sama nazwa wskazuje, muszą na czymś operować: są to ''operandy''. W naszym przypadku operandami są <tt>2</tt> i <tt>3</tt>.

==Operatory==
Spójrz na tabelę przedstawiającą operatory i ich użycie.

Zanim jednak to zrobisz, pozwól, że przypomnę Ci, że możesz obliczyć wartość wyrażenia, bezpośrednio używając linii poleceń interpretera. Spójrz na przykład:

<pre>
>>> 2 + 3
5
>>> 3 * 5
15
>>>
</pre>

{| border="1" cellpadding="8"
|+ '''Operatory i ich użycie'''
!Operator
!Nazwa
!Wyjaśnienie
!Przykłady
|-
| +
| Plus
| Dodaje dwa obiekty.
| <code>3 + 5</code> daje <code>8</code>. <code>'a' + 'b'</code> daje <code>'ab'</code>.
|-
| -
| Minus
| Daje odwrotność z podanej liczby bądź odejmuje jedną liczbę od drugiej.
| <code>-5.2</code> daje liczbę ujemną. <code>50 - 24</code> daje <code>26</code>.
|-
| <nowiki>*</nowiki>
| Mnożenie
| Daje iloczyn dwóch liczb bądź zwraca łańcuch powtórzony zadaną liczbę razy.
| <code>2 * 3</code> daje <code>6</code>. <code>'la' * 3</code> daje <code>'lalala'</code>.
|-
| <nowiki>**</nowiki>
| Potęgowanie
| Zwraca x do potęgi y.
| <code>3 ** 4</code> daje <code>81</code> (czyli <code>3 * 3 * 3 * 3</code>).
|-
| /
| Dzielenie
| Dzieli x przez y.
| <code>4 / 3</code> daje <code>1</code> (ponieważ dzielimy dwie liczby całkowite).

<code>4.0 / 3</code> oraz <code>4 / 3.0</code> daje <code>1.3333333333333333</code> (zamiast <code>.0</code> można wyjątkowo zastosować także samą kropkę, np. <code>4. / 3</code> - przyp. tłumacza).
|-
| //
| Dzielenie całkowite (ang. ''floor division'')
| Zwraca wynik dzielenia całkowitego.
| <code>4 // 3.0</code> daje <code>1.0</code>.
|-
| %
| Dzielenie modulo
| Zwraca wynik z dzielenia modulo, czyli po prostu resztę z dzielenia.
| <code>8 % 3</code> daje <code>2</code>. <code>-25.5 % 2.25</code> daje <code>1.5</code>.
|-
| &lt;&lt;
| Przesunięcie bitowe (ang. ''shift'') w lewo
| Przesuwa daną liczbę o zadaną liczbę bitów w lewo (pamiętaj, że liczby są zapisywane w pamięci postaci dwójkowej, czyli przez 0 i 1).
| <code>2 &lt;&lt; 2</code> daje <code>8</code>. <code>2</code> to <code>10</code> w zapisie dwójkowym. Przesunięcie w lewo o 2 bity daje <code>1000</code>, czyli <code>8</code> w zapisie dziesiętnym.
|-
| &gt;&gt;
| Przesunięcie bitowe w prawo
| Przesuwa daną liczbę o zadaną liczbę bitów w prawo.
| <code>11 &gt;&gt; 1</code> daje <code>5</code>. <code>11</code> w zapisie dwójkowym to <code>1011</code>, czyli przesuwając o 1 bit w prawo dostajemy <code>101</code>, czyli <code>5</code> w zapisie dziesiętnym.
|-
| &amp;
| &bdquo;i&rdquo; logiczne po wszystkich bitach (ang. ''bitwise AND'')
| Stosuje &bdquo;i&rdquo; logiczne na wszystkich bitach podanych liczb.
| <code>5 &amp; 3</code> daje <code>1</code>.
|-
| <nowiki>|</nowiki>
| &bdquo;lub&rdquo; logiczne po wszystkich bitach (ang. ''bitwise OR'')
| Stosuje &bdquo;lub&rdquo; logiczne na wszystkich bitach podanych liczb.
| <code>5 <nowiki>|</nowiki> 3</code> daje <code>7</code>.
|-
| ^
| &bdquo;nie lub&rdquo; logiczne po wszystkich bitach (ang. ''bitwise XOR'')
| Stosuje &bdquo;nie lub&rdquo; logiczne na wszystkich bitach podanych liczb.
| <code>5 ^ 3</code> daje <code>6</code>.
|-
| ~
| Negacja wszystkich bitów (ang. ''bitwise invert'')
| Negacja wszystkich bitów x daje -(x+1).
| <code>~5</code> daje <code>-6</code>.
|-
| &lt;
| Mniej niż
| Zwraca wartość logiczną zdania &bdquo;x mniejsze od y&rdquo;. Wszystkie operatory porównania zwracają <code>True</code> (prawda) lub <code>False</code> (fałsz). Zwróć uwagę na wielkie litery na początku.
| <code>5 &lt; 3</code> daje <code>False</code>, a <code>3 < 5</code> daje <code>True</code>.

Porównania mogą być dowolnie łączone: <code>3 < 5 < 7</code> daje <code>True</code>.
|-
| &gt;
| Większe niż
| Zwraca wartość logiczną zdania &bdquo;x większe od y&rdquo;.
| <code>5 &gt; 3</code> zwraca <code>True</code>.

Jeśli oba operandy są liczbami, najpierw są konwertowane do wspólnego typu. W przeciwnym wypadku wynikiem zawsze jest <code>False</code>.
|-
| &lt;=
| Mniejsze lub równe
| Zwraca wartość logiczną zdania &bdquo;x mniejsze lub równe y&rdquo;.
| <code>x = 3; y = 6</code>

<code>x &lt;= y</code> zwraca <code>True</code>.
|-
| &gt;=
| Większe lub równe
| Zwraca wartość logiczną zdania &bdquo;x większe lub równe y&rdquo;.
| <code>x = 4; y = 3</code>

<code>x &gt;= 3</code> zwraca <code>True</code>.
|-
| <nowiki>==</nowiki>
| Równe
| Zwraca wartość logiczną zdania &bdquo;x równe y&rdquo;.
| <code>x = 2; y = 2</code>

<code>x == y</code> zwraca <code>True</code>.

<code>x = 'str'; y = 'stR'</code>

<code>x == y</code> zwraca <code>False</code>.

<code>x = 'str'; y = 'str'</code>

<code>x == y</code> zwraca <code>True</code>.
|-
| !=
| Nie jest równe
| Zwraca wartość logiczną zdania &bdquo;x nie jest równe y&rdquo;.
| <code>x = 2; y = 3</code>

<code>x != y</code> zwraca <code>True</code>.
|-
| not
| Logiczne &bdquo;nie&rdquo; (ang. ''boolean NOT'')
| Jeśli x jest prawdą, zwracane jest <code>False</code>. Jeśli x jest fałszem, zwracane jest <code>True</code>.
| <code>x = True</code>

<code>not x</code> zwraca <code>False</code>.
|-
| and
| Logiczne &bdquo;i&rdquo; (ang. ''boolean AND'')
| <code>x and y</code> zwraca <code>x</code> jeżeli <code>x</code> jest fałszywe, w przeciwnym wypadku zwraca <code>y</code>
| <code>x = False; y = True</code>

<code>x and y</code> zwraca <code>False</code>, ponieważ <code>x</code> jest fałszywe. W tym przypadku Python nie oblicza wartości <code>y</code>, ponieważ obliczenie lewej strona wyrażenia wystarcza do wyliczenia wartości całego wyrażenia, niezależnie od wartości logicznej <code>y</code>. Nazywa się to wykonaniem warunkowym (ang. ''short-circuit evaluation'').
|-
| or
| Logiczne &bdquo;lub&rdquo; (ang. ''boolean OR'')
| <code>x or y</code> zwraca <code>x</code> jeśli <code>x</code> jest prawdziwe, w przeciwnym wypadku zwraca <code>y</code>.
| <code>x = True; y = False</code>

<code>x or y</code> zwraca <code>True</code>. Wykonanie warunkowe również tutaj ma zastosowanie.
|}

==Pierwszeństwo operatorów==
Jeśli mamy wyrażenie typu <code>2 + 3 * 4</code>, co jest wykonywane najpierw: dodawanie czy mnożenie? Znając matematykę wyższą, możemy stwierdzić, ze mnożenie powinno być wykonane w pierwszej kolejności, co oznacza, że operator mnożenia ma większe pierwszeństwo (ang. precedence) od operatora dodawania.

Poniższa tabela daje nam spojrzenie na pierwszeństwo operatorów w Pythonie, od najmniejszego (czyli najmniej znaczącego) do największego (największe znaczenie). W praktyce wygląda to tak, że w wyrażeniu Python najpierw wykona czynności operatorów będących najniżej w tabeli, a dopiero potem tych będących wyżej.

Zamieściłem tę tabelę (skopiowaną z [http://docs.python.org/reference/expressions.html#evaluation-order oficjalnego podręcznika]), abyś miał pełne spojrzenie na sprawę. Jednak zdecydowanie lepiej jest grupować operatory i operandy za pomocą nawiasów, żeby jednoznacznie (nawet dla czytelnika programu) określić kolejność wykonywania operacji. Dzięki temu program staje się czytelniejszy.

{| border="1" cellpadding="4"
|+ '''Pierwszeństwo operatorów'''
! Operator
! Opis
|-
| lambda
| Wyrażenie lambda
|-
| or
| Logiczne &bdquo;lub&rdquo;
|-
| not x
| Logiczne &bdquo;nie&rdquo;
|-
| in, not in
| Sprawdzanie obecności <!--membership test-->
|-
| is, is not
| Sprawdzanie identyczności
|-
| <, <=, >, >=, !=, ==
| Porównania
|-
| <nowiki>|</nowiki>
| Logiczne &bdquo;lub&rdquo; po wszystkich bitach
|-
| ^
| Logiczne &bdquo;nie lub&rdquo; po wszystkich bitach
|-
| ^
| Logiczne &bdquo;i&rdquo; po wszystkich bitach
|-
| &lt;&lt;, &gt;&gt;
| Przesunięcia bitowe
|-
| +, -
| Dodawanie i odejmowanie
|-
| <nowiki>*</nowiki>, /, %
| Mnożenie, dzielenie i dzielenie modulo
|-
| +x, -x
| Liczba pozytywna, negatywna (przeciwna)
|-
| ~x
| Negacja wszystkich bitów
|-
| **
| Potęgowanie
|-
| x.atrybut
| Użycie atrybutu
|-
| x[indeks]
| <!--Subscription-->
|-
| x[indeks:indeks]
| <!--Slicing-->
|-
| f(argumenty ...)
| Wywołanie funkcji
|-
| (wyrażenia, ...)
| Wyświetlenie <!--to dobre słowo?--> <!--binding lub--> krotki
|-
| [wyrażenia, ...]
| Wyświetlenie listy
|-
| {klucz:dane, ...}
| Wyświetlenie słownika
|-
| `wyrażenia, ...`
| Konwersja na łańcuch
|}

Operatory, z którymi się jeszcze nie zapoznaliśmy, zostaną wyjaśnione w następnych rozdziałach.

Operatory mające ''takie samo pierwszeństwo'' znajdują się w jednym wierszu w powyższej tabeli. Przykładowo, <tt>+</tt> i <tt>-</tt> mają takie samo pierwszeństwo.

===Kolejność wykonywania===
Domyślnie o kolejności wykonywania operacji decyduje tabela pierwszeństwa operatorów.

Aby uczynić wyrażenia bardziej czytelnymi, używamy nawiasów. Przykładowo <code>2 + (3 * 4)</code> jest dużo bardziej czytelne, niż <code>2 + 3 * 4</code>. Oczywiście nie przesadzaj z używaniem nawiasów, żeby uniknąć takich sytuacji, jak na przykład pisanie <code>2 + (3 + 4)</code>.

Jeśli chcesz zmienić kolejność wykonywania, również musisz użyć nawiasów. Aby dodawanie zostało wykonane przed mnożeniem, możesz napisać coś w stylu <code>(2 + 3) * 4</code>.

===Łączność operatorów===
Operatory są zazwyczaj łączone od lewej do prawej, co oznacza, że operacje z tym samym pierwszeństwem są wykonywane od lewej do prawej. Przykładowo <code>2 + 3 + 4</code> jest wykonywane jak <code>(2 + 3) + 4</code>. Niektóre operatory, jak operator przypisania, łączone są od prawej do lewej, np. <code>a = b = c</code> jest traktowane jak <code>a = (b = c)</code>.

==Wyrażenia==
===Używanie wyrażeń===
Przykład:

<source lang="py">
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Nazwa pliku: wyrazenia.py

dlugosc = 5
szerokosc = 2
pole = dlugosc * szerokosc
print 'Pole wynosi', pole
print 'Obwód wynosi', 2 * (dlugosc + szerokosc)
</source>

Rezultat:

<pre>
$ python wyrazenia.py
Pole wynosi 10
Obwód wynosi 14
</pre>

Jak to działa:

Długość i szerokość prostokąta są przechowywane w zmiennych o tych samych nazwach. Użyjemy tych zmiennych, aby za pomocą wyrażeń obliczyć pole i obwód tego prostokąta. Przechowujemy wynik wyrażenia <code>dlugosc * szerokosc</code> w zmiennej <code>pole</code>, aby wypisać jej wartość za pomocą polecenia <code>print</code>. W przypadku obwodu bezpośrednio używamy wyrażenia <code>2 * (dlugosc + szerokosc)</code> w poleceniu <code>print</code>.

Zauważ też, jak Python ładnie wyprowadza wyjście. Mimo, że nie umieściliśmy spacji (jako znaku do wypisania) pomiędzy <code>'Pole wynosi'</code> a zmienną <code>pole</code>, Python dał ją tam za nas, dzięki czemu uzyskaliśmy ładne, czytelne wyjście, a program jest tym sposobem czytelniejszy (ponieważ nie musimy martwić się o odstępy w łańcuchach, które wyprowadzamy na wyjście). Jest to świetny przykład, jak Python może ułatwiać życie programiście.

==Podsumowanie==
Nauczyliśmy się już używać operatorów, operandów i wyrażeń, czyli podstawowych klocków, z których składa się każdy program. Teraz zobaczymy, jak za pomocą poleceń zrobić z nich prawdziwy użytek.

{{Nawigacja|Ukąś Pythona|[[Ukąś Pythona/Podstawy|Podstawy]]|[[Ukąś Pythona/Kontrola przepływu|Kontrola przepływu]]|}}
